== Team members ==
Xiang Li xpl5016
Jesse Rong jbr5205

== Performance evaluation ==
mr_wordc
1 thread
  100B buffer:
  1kB buffer:
  10kB buffer:
2 threads
  100B buffer:
  1kB buffer:
  10kB buffer:
4 threads
  100B buffer:
  1kB buffer:
  10kB buffer:
8 threads
  100B buffer:
  1kB buffer:
  10kB buffer:

We expect that with increasing threads, the program will run faster and then slower once there are too many threads. Also, the bigger the buffers are, the faster the program will execute.

In addition to the 6 given functions and structure, our c program has 2 more structures, one for the wrapper functions and one for the buffer, which we implemented as a linked list. We have 2 extra functions, both are wrapper functions for map and reduce.

The reason we used a linked list is because it's easier to keep track of where to produce and where to consume compared to an array.

Within the .h file's map_reduce structure, we put a lock, 2 conditional variables, the head and tail nodes to our linked list, informcation about the number and size of key values and file descriptors.

In the .c program, we had a lot of trouble with memory. We spent many hours over several days finding out where and why some memory would not be initialized or freed. We also experienced problems with the usage of locks.

== Sources consulted ==
(please cite here as well as in comments by the relevant code)
http://stackoverflow.com/questions/29350073/invalid-write-of-size-8-after-a-malloc

https://www.ibm.com/support/knowledgecenter/ssw_aix_71/com.ibm.aix.basetrf1/PTHREAD_MUTEX_INITIALIZER.htm

http://stackoverflow.com/questions/230062/whats-the-best-way-to-check-if-a-file-exists-in-c-cross-platform

http://stackoverflow.com/questions/29350073/invalid-write-of-size-8-after-a-malloc

http://stackoverflow.com/questions/143123/how-to-create-a-buffer-for-reading-socket-data-in-c

== How to use the gdb ==

```
to use gdb
type $ gdb <exec file>
(gdb) r <args>
if segfault
(gdb) bt where
 find the line with your code on iit
 if your error is on line 1
  (gdb) f 1
   0x0 is a segfault
   0xabababababababababab is uninitialized
 info locals -print out all local var
 info args -prints out all args
 info thr -prints out all thread
```
